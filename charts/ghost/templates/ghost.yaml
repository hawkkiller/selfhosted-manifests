{{ if .Values.database.sqlite3.enabled }}
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ .Release.Name }}-local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Release.Name }}-volume
spec:
  storageClassName: {{ .Release.Name }}-local-storage
  capacity:
    storage: {{ .Values.database.size }}
  local:
    path: {{ .Values.database.sqlite3.connection.mount }}
  persistentVolumeReclaimPolicy: Retain
  accessModes:
    - ReadWriteOnce
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: app
              operator: In
              values:
                - {{ .Release.Name }}
{{ end }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
spec:
  serviceName: {{ .Release.Name }}
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      initContainers:
        # litestream restore!
        {{ if and .Values.database.sqlite3.enabled .Values.litestream.enabled }}
        - name: "{{ .Release.Name }}-litestream-restore"
          image: "{{ include "litestream.image" . }}"
          args:
            - "restore"
            - "-if-db-not-exists"
            - "-if-replica-exists"
            - "-v"
            - "-o"
            - "{{ .Values.database.sqlite3.connection.filename }}"
            - "{{ include "litestream.s3.path" . }}"
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.litestream.awsSecretRef }}
                  key: aws_access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.litestream.awsSecretRef }}
                  key: aws_secret_access_key
          volumeMounts:
            - mountPath: {{ .Values.database.sqlite3.connection.mount }}
              name: {{ .Release.Name }}-volume-claim
        {{ end }}

      containers:
        # Ghost
        - name: {{ .Release.Name }}
          image: "{{ include "ghost.image" . }}"
          imagePullPolicy: {{ .Values.ghost.image.pullPolicy }}
          volumeMounts:
            {{ if .Values.database.sqlite3.enabled }}
            - mountPath: {{ .Values.database.sqlite3.connection.mount }}
              name: {{ .Release.Name }}-volume-claim
            {{ end }}
          ports:
            - containerPort: 2368
              name: http
          env:
            - name: NODE_ENV
              value: {{ .Values.ghost.nodeEnv }}
            - name: TZ
              value: {{ .Values.ghost.timezone }}
            - name: url
              value: {{ .Values.ghost.url }}
            - name: mail__from
              value: {{ .Values.ghost.mail.from }}
            - name: mail__transport
              value: {{ .Values.ghost.mail.transport }}
            - name: mail__options__host
              value: {{ .Values.ghost.mail.host }}
            - name: mail__options__port
              value: {{ .Values.ghost.mail.port }}
            - name: mail__options__auth__user
              value: {{ .Values.ghost.mail.auth.username }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.ghost.mail.auth.privateSecretRef }}
                  key: username
            - name: mail__options__auth__pass
              value: {{ .Values.ghost.mail.auth.password }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.ghost.mail.auth.privateSecretRef }}
                  key: password
              # sqlite
              {{ if .Values.database.sqlite3.enabled }}
            - name: database__client
              value: "sqlite3"
            - name: database__connection__filename
              value: {{ .Values.database.sqlite3.connection.filename }}
              {{ end }}
              # mysql
              {{ if .Values.database.mysql.enabled }}
            - name: database__client
              value: "mysql"
            - name: database__connection__host
              value: {{ include "mysql.host" . }}
            - name: database__connection__user
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.mysql.connection.privateSecretRef }}
                  key: mysql-username
            - name: database__connection__password
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.mysql.connection.privateSecretRef }}
                  key: mysql-password
            - name: database__connection__database
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.mysql.connection.privateSecretRef }}
                  key: mysql-database
              {{ end }}
        {{ if and .Values.database.sqlite3.enabled .Values.litestream.enabled }}
        # sidecar litestream that replicates everything to S3 in the background
        - name: {{ .Release.Name }}-litestream
          image: "{{ include "litestream.image" . }}"
          args:
            - "replicate"
            - "{{ .Values.database.sqlite3.connection.filename }}"
            - "{{ include "litestream.s3.path" . }}"
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.litestream.awsSecretRef }}
                  key: aws_access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.litestream.awsSecretRef }}
                  key: aws_secret_access_key
          volumeMounts:
            - mountPath: {{ .Values.database.sqlite3.connection.mount }}
              name: {{ .Release.Name }}-volume-claim
        {{ end }}
  {{ if .Values.database.sqlite3.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: {{ .Release.Name }}-volume-claim
      spec:
        storageClassName: {{ .Release.Name }}-local-storage
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            {{ if .Values.database.sqlite3.enabled }}
            storage: {{ .Values.database.size }}
            {{ end }}
  {{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}
spec:
  type: {{ .Values.ghost.service.type }}
  ports:
    - port: {{ .Values.ghost.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ .Release.Name }}