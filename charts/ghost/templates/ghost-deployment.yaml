apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      initContainers:
        - name: mysql-wait
          image: busybox:1.36.0
          env:
            - name: MYSQL_HOST
              value: {{ include "mysql.host" . | quote }}
            - name: MYSQL_PORT
              value: "3306"
          command:
            - sh
            - -c
            - |
              #!/bin/sh
              until echo "SELECT 1" | nc -w 1 ${MYSQL_HOST} ${MYSQL_PORT}>/dev/null; do
                echo "MySQL is not running yet"
                sleep 3
              done

              echo "MySQL is running"
        - name: mysql-apply-dump
          image: amazon/aws-cli
          env:
            - name: S3_REGION
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.awsSecretRef }}
                  key: S3_REGION
            - name: S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.awsSecretRef }}
                  key: S3_BUCKET
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.awsSecretRef }}
                  key: S3_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.awsSecretRef }}
                  key: S3_SECRET_ACCESS_KEY
            - name: MYSQL_HOST
              value: {{ include "mysql.host" . | quote }}
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.connection.privateSecretRef }}
                  key: mysql-username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.connection.privateSecretRef }}
                  key: mysql-password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.connection.privateSecretRef }}
                  key: mysql-database
            - name: GHOST_TABLE_NAME
              value: permissions
          command:
            - sh
            - -c
            - |
              #!/bin/sh

              # install tar, gzip
              yum -y install tar gzip

              # Install the MySQL Community Repo for mysqldump
              yum -y install https://dev.mysql.com/get/mysql80-community-release-el7-7.noarch.rpm

              # Install the mysqldump package
              yum -y install mysql-community-client

              # Check if table exists
              query="SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='${MYSQL_DATABASE}' AND table_name='${GHOST_TABLE_NAME}';"
              table_exists=$(mysql -u ${MYSQL_USER} -p${MYSQL_PASSWORD} -h ${MYSQL_HOST} -e "$query" --skip-column-names)

              apply_dump=0

              if [[ $table_exists -eq 1 ]]; then
                echo "Table ${GHOST_TABLE_NAME} exists, skipping MySQL dump import..."
                exit 0
              else
                apply_dump=1
              fi

              # Apply MySQL dump if necessary
              if [[ $apply_dump -eq 1 ]]; then
                echo "Importing MySQL dump..."
                # Remote backup directory
                REMOTE_DIR="s3://${S3_BUCKET}/{{- .Values.backup.mysqlPath -}}"

                # Download latest backup
                LATEST_BACKUP=$(aws s3 ls ${REMOTE_DIR} --recursive | sort | tail -n 1 | awk '{print $4}')

                if [[ -z "$LATEST_BACKUP" ]]; then
                  echo "No backup found in ${REMOTE_DIR}"
                  exit 0
                fi

                parent_dir=$(dirname "/tmp/${LATEST_BACKUP}")

                mkdir -p $parent_dir

                echo "Downloading ${LATEST_BACKUP} from ${REMOTE_DIR}..."

                aws s3 cp "s3://${S3_BUCKET}/${LATEST_BACKUP}" /tmp/${LATEST_BACKUP}

                # MySQL data does not exist, apply the dump
                gunzip < /tmp/${LATEST_BACKUP} | mysql -u ${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE}

                # Remove the dump file
                rm /tmp/${LATEST_BACKUP}
                echo "MySQL dump imported successfully."
              fi
        - name: ghost-apply-dump
          image: amazon/aws-cli
          env:
            - name: S3_REGION
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.awsSecretRef }}
                  key: S3_REGION
            - name: S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.awsSecretRef }}
                  key: S3_BUCKET
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.awsSecretRef }}
                  key: S3_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.awsSecretRef }}
                  key: S3_SECRET_ACCESS_KEY
          command:
            - sh
            - -c
            - |
              #!/bin/sh

              REMOTE_DIR="s3://${S3_BUCKET}/{{- .Values.backup.ghostPath -}}"

              # find latest backup folder in REMOTE_DIR
              LATEST_BACKUP=$(aws s3 ls ${REMOTE_DIR} --recursive | sort -r | grep -m1 -oE "$PREFIX/[0-9-]{19}")

              if [[ -z "$LATEST_BACKUP" ]]; then
                  echo "No backup found in ${REMOTE_DIR}"
                  exit 0
              fi

              # Download latest backup
              echo "Downloading ${REMOTE_DIR}${LATEST_BACKUP}/content/ from ${REMOTE_DIR}..."
              aws s3 cp ${REMOTE_DIR}${LATEST_BACKUP}/content/ {{ .Values.ghost.mount }} --recursive
          volumeMounts:
            - mountPath: {{ .Values.ghost.mount }}
              name: ghost-content
      containers:
        # Ghost
        - name: {{ .Release.Name }}
          image: "{{ include "ghost.image" . }}"
          imagePullPolicy: {{ .Values.ghost.image.pullPolicy }}
          ports:
            - containerPort: 2368
              name: http
          env:
            - name: NODE_ENV
              value: {{ .Values.ghost.nodeEnv | quote }}
            - name: TZ
              value: {{ .Values.ghost.timezone | quote }}
            - name: url
              value: {{ .Values.ghost.url | quote }}
            - name: mail__from
              value: {{ .Values.ghost.mail.from | quote }}
            - name: mail__transport
              value: {{ .Values.ghost.mail.transport | quote }}
            - name: mail__options__host
              value: {{ .Values.ghost.mail.host | quote }}
            - name: mail__options__port
              value: {{ .Values.ghost.mail.port | quote }}
            - name: mail__options__auth__user
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.ghost.mail.auth.privateSecretRef }}
                  key: username
            - name: mail__options__auth__pass
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.ghost.mail.auth.privateSecretRef }}
                  key: password
            - name: database__client
              value: "mysql"
            - name: database__connection__host
              value: {{ include "mysql.host" . | quote }}
            - name: database__connection__user
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.connection.privateSecretRef }}
                  key: mysql-username
            - name: database__connection__password
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.connection.privateSecretRef }}
                  key: mysql-password
            - name: database__connection__database
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.connection.privateSecretRef }}
                  key: mysql-database
          volumeMounts:
            - mountPath: {{ .Values.ghost.mount }}
              name: ghost-content
      volumes:
        - name: ghost-content
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-ghost-volume-claim"
{{/*  apps*/}}
{{/*  data*/}}
{{/*  files*/}}
{{/*  images*/}}
{{/*  logs*/}}
{{/*  lost+found*/}}
{{/*  media*/}}
{{/*  public*/}}
{{/*  settings*/}}
{{/*  themes*/}}