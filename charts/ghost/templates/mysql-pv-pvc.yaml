apiVersion: v1
kind: PersistentVolume
metadata:
  name: "{{ .Release.Name }}-mysql-volume"
spec:
  capacity:
    storage: {{ .Values.mysql.size }}
  local:
    path: {{ .Values.mysql.mount }}
  persistentVolumeReclaimPolicy: Retain
  accessModes:
    - ReadWriteOnce
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: app
              operator: In
              values:
                - {{ .Release.Name }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-mysql-volume-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.mysql.size }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Release.Name }}-mysql-backup
spec:
  schedule: "* * * * *" #	Run every minute
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: {{ .Release.Name }}-mysql-backup
              image: busybox:latest
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - mountPath: {{ .Values.mysql.mount }}
                  name: {{ .Release.Name }}-mysql-claim
              command:
                - /bin/sh
                - -c
                - date; echo Hello!;
                - ls var/lib/mysql;
          restartPolicy: OnFailure
          volumes:
            - name: {{ .Release.Name }}-mysql-claim
              persistentVolumeClaim:
                claimName: {{ .Release.Name }}-mysql-volume-claim